import 'dart:io' show Platform;
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

class Push {
  static final _fln = FlutterLocalNotificationsPlugin();

  static Future<void> init() async {
    // --- –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—à–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    const android = AndroidInitializationSettings('@mipmap/ic_launcher');
    const ios = DarwinInitializationSettings();
    await _fln.initialize(
      const InitializationSettings(android: android, iOS: ios),
    );

    try {
      // --- Firebase init (—Ä–∞–∑–Ω–æ–µ –¥–ª—è Web –∏ Mobile)
      await Firebase.initializeApp();

      final fm = FirebaseMessaging.instance;

      // --- –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è iOS –∏ Web)
      await fm.requestPermission();

      // --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      String? token;
      if (Platform.isAndroid || Platform.isIOS) {
        token = await fm.getToken();
      } else if (kIsWeb) {
        token = await fm.getToken(
          vapidKey:
              "–¢–í–û–ô_PUBLIC_VAPID_KEY", // –≤—Å—Ç–∞–≤—å –∏–∑ Firebase Console ‚Üí Cloud Messaging
        );
      }

      print("üîë FCM Token: $token");

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ (—Ç–æ–ª—å–∫–æ mobile)
      FirebaseMessaging.onBackgroundMessage(_firebaseBackgroundHandler);

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      FirebaseMessaging.onMessage.listen((m) async {
        await _fln.show(
          0,
          m.notification?.title ?? '–°–æ–æ–±—â–µ–Ω–∏–µ',
          m.notification?.body ?? '',
          const NotificationDetails(
            android: AndroidNotificationDetails(
              'default',
              'General',
              importance: Importance.max,
              priority: Priority.high,
            ),
            iOS: DarwinNotificationDetails(),
          ),
        );
      });
    } catch (e) {
      print("‚ö†Ô∏è Firebase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: $e");
    }
  }

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Android/iOS)
  static Future<void> _firebaseBackgroundHandler(RemoteMessage message) async {
    print("üì© –ü–æ–ª—É—á–µ–Ω–æ –≤ —Ñ–æ–Ω–µ: ${message.notification?.title}");
  }

  // --- –¢–µ—Å—Ç–æ–≤–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static Future<void> sendTestNotification() async {
    await _fln.show(
      999,
      "–ü—Ä–∏–≤–µ—Ç üëã",
      "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–æ–µ)",
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'test_channel',
          'Test Notifications',
          importance: Importance.max,
          priority: Priority.high,
        ),
        iOS: DarwinNotificationDetails(),
      ),
    );
  }
}
